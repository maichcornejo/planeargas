import cv2
import numpy as np

# Función para cargar la imagen raster
def cargar_imagen(path):
    image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
    if image is None:
        raise FileNotFoundError(f"No se pudo cargar la imagen en la ruta: {path}")
    return image

# Función para detectar artefactos y ventilaciones
def detectar_artefactos_ventilaciones(image):
    # Ajustar los umbrales para artefactos y ventilaciones
    umbral_gris_bajo = 80
    umbral_gris_alto = 200
    umbral_verde = 255

    # Detectar artefactos en gris (valores en el rango de grises)
    artefactos = cv2.inRange(image, umbral_gris_bajo, umbral_gris_alto)

    # Detectar ventilaciones (verde brillante, en imágenes binarizadas puede aparecer como blanco)
    ventilaciones = cv2.inRange(image, umbral_verde, umbral_verde)

    return artefactos, ventilaciones

# Función para asignar nombre y orientación basados en el análisis del artefacto
def obtener_nombre_y_orientacion(artefacto_img, x, y, w, h):
    # Determinar el tipo de artefacto basado en sus características
    aspecto = w / h  # Relación de aspecto (ancho/alto)

    if aspecto > 1.5:  # Ejemplo para determinar el tipo basado en la relación de aspecto
        if w > 100:  # Si es ancho y tiene una relación de aspecto larga, puede ser una cocina
            return "Cocina", "Orientación Frontal"
        else:
            return "Calefactor Tiro Balanceado Lateral", "Orientación Lateral"
    elif aspecto < 1.5 and aspecto > 0.75:
        return "Calefactor Tiro Natural", "Orientación Vertical"
    elif aspecto < 0.75:
        return "Caldera TBF", "Orientación Tiro Balanceado Frontal"
    
    return "Artefacto Desconocido", "Orientación Desconocida"

# Función para extraer las coordenadas de los objetos detectados
def extraer_coordenadas(bin_image):
    # Detectar contornos
    contornos, _ = cv2.findContours(bin_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    coordenadas = []
    for cnt in contornos:
        x, y, w, h = cv2.boundingRect(cnt)
        coordenadas.append((x, y, w, h))  # Agregar las coordenadas y el tamaño de cada contorno
    return coordenadas

# Función para procesar las imágenes y guardar el archivo de salida
def procesar_imagenes_y_guardar(imagen_path_1, imagen_path_2, output_path):
    # Cargar las imágenes
    try:
        image_1 = cargar_imagen(imagen_path_1)
        image_2 = cargar_imagen(imagen_path_2)
    except FileNotFoundError as e:
        print(e)
        return

    # Detectar artefactos y ventilaciones en ambas imágenes
    artefactos_1, ventilaciones_1 = detectar_artefactos_ventilaciones(image_1)
    artefactos_2, ventilaciones_2 = detectar_artefactos_ventilaciones(image_2)

    # Extraer las coordenadas
    coords_artefactos_1 = extraer_coordenadas(artefactos_1)
    coords_ventilaciones_1 = extraer_coordenadas(ventilaciones_1)
    coords_artefactos_2 = extraer_coordenadas(artefactos_2)
    coords_ventilaciones_2 = extraer_coordenadas(ventilaciones_2)

    # Guardar los datos en un archivo de texto
    with open(output_path, 'w') as f:
        f.write('Artefactos en imagen 1:\n')
        if coords_artefactos_1:
            for coord in coords_artefactos_1:
                x, y, w, h = coord
                nombre, orientacion = obtener_nombre_y_orientacion(artefactos_1, x, y, w, h)
                f.write(f'Nombre: {nombre}, Orientación: {orientacion}, Coordenadas: {coord}\n')
        else:
            f.write('No se detectaron artefactos en la imagen 1\n')
        
        f.write('Ventilaciones en imagen 1:\n')
        if coords_ventilaciones_1:
            for coord in coords_ventilaciones_1:
                f.write(f'Coordenadas: {coord}\n')
        else:
            f.write('No se detectaron ventilaciones en la imagen 1\n')

        f.write('Artefactos en imagen 2:\n')
        if coords_artefactos_2:
            for coord in coords_artefactos_2:
                x, y, w, h = coord
                nombre, orientacion = obtener_nombre_y_orientacion(artefactos_2, x, y, w, h)
                f.write(f'Nombre: {nombre}, Orientación: {orientacion}, Coordenadas: {coord}\n')
        else:
            f.write('No se detectaron artefactos en la imagen 2\n')

        f.write('Ventilaciones en imagen 2:\n')
        if coords_ventilaciones_2:
            for coord in coords_ventilaciones_2:
                f.write(f'Coordenadas: {coord}\n')
        else:
            f.write('No se detectaron ventilaciones en la imagen 2\n')

# Rutas de ejemplo para probar el código
imagen_path_1 = "/home/Maia/planeargas/backend/src/imagen_raster/ventilaciones.tif"
imagen_path_2 = "/home/Maia/planeargas/backend/src/imagen_raster/artefactos.tif"
output_path = "/home/Maia/planeargas/backend/src/detecciones/ventilaciones_artefactos.tif"

# Ejecutar la función para procesar y generar el archivo de salida
procesar_imagenes_y_guardar(imagen_path_1, imagen_path_2, output_path)
