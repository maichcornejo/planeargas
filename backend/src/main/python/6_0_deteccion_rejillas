import cv2
import numpy as np

# Función para determinar si un contorno es una rejilla de ventilación o ventilación
def es_rejilla(contour, hsv_image, mask):
    x, y, w, h = cv2.boundingRect(contour)
    aspect_ratio = w / float(h)

    # Ampliar el rango del aspect ratio para detectar rejillas ligeramente más rectangulares
    if 0.7 < aspect_ratio < 2.0 and 10 < w < 50 and 10 < h < 50:  # Rejillas más pequeñas, cuadradas o ligeramente rectangulares
        
        # Calcular el centroide del contorno
        cx = int(x + w / 2)
        cy = int(y + h / 2)

        # Definir un radio circular para buscar píxeles verdes debajo del contorno
        radius = 20  # Ajustar el radio según necesidad
        circular_mask = np.zeros(mask.shape[:2], dtype="uint8")

        # Dibujar un círculo centrado justo debajo del contorno (ajustado hacia abajo)
        cv2.circle(circular_mask, (cx, cy + h // 2), radius, 255, -1)  # El círculo está centrado ligeramente debajo

        # Usar la máscara circular para buscar líneas verdes
        masked_green = cv2.bitwise_and(mask, mask, mask=circular_mask)

        # Contar los píxeles verdes dentro del área circular
        green_pixel_count = cv2.countNonZero(masked_green)

        # Si encontramos suficientes píxeles verdes, descartarlo como rejilla (clasificarlo como ventilación)
        if green_pixel_count > 7000:  # Ajustar el umbral según los resultados
            return False  # Es una ventilación, descartamos como rejilla

        # Si no hay suficientes píxeles verdes, lo consideramos una rejilla
        return True

    return False

# Cargar la imagen
image_path = '/home/Maia/planeargas/backend/src/imagen_entrada/planta_1.png'
image = cv2.imread(image_path)

# Convertir la imagen a formato HSV (para detección de color)
hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# Definir el rango de color para detectar el verde (para las ventilaciones resaltadas en verde)
lower_green = np.array([40, 40, 40])
upper_green = np.array([70, 255, 255])

# Crear una máscara que detecte solo los píxeles en el rango verde
mask = cv2.inRange(hsv_image, lower_green, upper_green)

# Encontrar los contornos de las rejillas de ventilación
contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

ventilations = []
for contour in contours:
    if es_rejilla(contour, hsv_image, mask):
        # Calcular el centroide de cada rejilla
        M = cv2.moments(contour)
        if M['m00'] != 0:
            cx = int(M['m10'] / M['m00'])  # Coordenada X
            cy = int(M['m01'] / M['m00'])  # Coordenada Y
            ventilations.append((cx, cy))

            # Dibujar un círculo en el centro de la rejilla detectada (color blanco en formato BGR)
            cv2.circle(image, (cx, cy), 5, (255, 255, 255), -1)

# Guardar la imagen con las rejillas detectadas
output_image_path = '/home/Maia/planeargas/backend/src/detecciones/plano_con_rejillas.png'
cv2.imwrite(output_image_path, image)

# Generar el archivo de texto con las coordenadas
output_txt_path = '/home/Maia/planeargas/backend/src/detecciones/ubicacion_rejillas.txt'
with open(output_txt_path, 'w') as file:
    for i, (cx, cy) in enumerate(ventilations):
        file.write(f"Rejilla {i + 1}: X = {cx}, Y = {cy}\n")

print(f"Imagen guardada en: {output_image_path}")
print(f"Coordenadas guardadas en: {output_txt_path}")
